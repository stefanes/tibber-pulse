parameters:
  # Name of the PowerShell repo to install from (A-Z, a-z, 0-9,
  # underscore, dash, dot, and the space character).
  - name: repoName
    displayName: PowerShell repo name
    type: string
    default: PSGallery
    values:
      - PSGallery

  # List of modules to install.
  - name: modules
    displayName: Modules to install
    type: object

  # Minimum version of the modules to install.
  - name: minimumVersion
    displayName: Minimum module version
    type: string
    default: ""

  # Maximum version of the modules to install.
  - name: maximumVersion
    displayName: Maximum module version
    type: string
    default: ""

  # The exact version of the modules to install.
  - name: requiredVersion
    displayName: Required module version
    type: string
    default: ""

  # Allow overwriting existing commands that have the same name as
  # commands being installed by a module.
  - name: allowClobber
    displayName: Allow clobber
    type: boolean
    default: false

  # Allow installation when existing module is digitally signed by a
  # trusted publisher but the new version is not digitally signed.
  - name: skipPublisherCheck
    displayName: Skip publisher check
    type: boolean
    default: false

  # Allows you to install a module marked as a pre-release.
  - name: allowPrerelease
    displayName: Allow pre-release versions
    type: boolean
    default: false

  # Uninstall any old version before installation.
  - name: reinstall
    displayName: Re-install module
    type: boolean
    default: true

steps:
  - template: check-powershellget.yml

  - pwsh: |
      # PowerShell repo details
      $repoName = "${{ parameters.repoName }}"

      # Setup parameters (removing any empty values)
      (($splat = @{
              MinimumVersion  = "${{ parameters.minimumVersion }}"
              MaximumVersion  = "${{ parameters.maximumVersion }}"
              RequiredVersion = "${{ parameters.requiredVersion }}"
              Repository      = $repoName
              AllowPrerelease = [bool]::Parse("${{ parameters.allowPrerelease }}")
          }).GetEnumerator() | Where-Object { -Not $_.Value }) | ForEach-Object { $splat.Remove($_.Name) }
      (($moreSplat = @{
              Scope              = 'CurrentUser'
              AllowClobber       = [bool]::Parse("${{ parameters.allowClobber }}")
              SkipPublisherCheck = [bool]::Parse("${{ parameters.skipPublisherCheck }}")
              Force              = $true
              PassThru           = $true
          }).GetEnumerator() | Where-Object { -Not $_.Value }) | ForEach-Object { $moreSplat.Remove($_.Name) }

      # Install modules
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      $modules = "${{ join(';',parameters.modules) }}" -split ';' | Where-Object { $_ }
      foreach ($moduleName in $modules) {
          Write-Host "##[section]$moduleName"
          $splat.Name = $moduleName # set to current module

          # Check if already using the right version
          Write-Host "Check if already using the required version of '$moduleName'..."
          Write-Host "##[command]Get-Module -ListAvailable -Name $moduleName"
          $installedModule = Get-Module -ListAvailable -Name $moduleName
          if ($installedModule) {
              $currentVersion = ($installedModule).Version
              Write-Host "Current version: $currentVersion"
              Write-Host "##[command]Find-Module @splat"
              Write-Host "##[command]> with `$splat -> $($splat | ConvertTo-Json -Depth 10)"
              $requiredVersion = (Find-Module @splat).Version
              Write-Host "Required version: $requiredVersion"
              if ($requiredVersion -eq $currentVersion) {
                  Write-Host "Already using the required version of '$moduleName'"
                  continue # go to next item in foreach
              }
          }

          # Uninstall module (as part of reinstallation)
          if ([bool]::Parse("${{ parameters.reinstall }}")) {
              Write-Host "Reinstall requested, uninstalling '$moduleName'..."
              Write-Host "##[command]Uninstall-Module -Name $moduleName -AllVersions -AllowPrerelease -Force -ErrorAction SilentlyContinue"
              Uninstall-Module -Name $moduleName -AllVersions -AllowPrerelease -Force -ErrorAction SilentlyContinue
          }

          # Install required version
          Write-Host "Installing '$moduleName'..."
          Write-Host "##[command]Install-Module @splat @moreSplat"
          Write-Host "##[command]> with `$splat + `$moreSplat -> $($splat + $moreSplat | ConvertTo-Json -Depth 10)"
          Install-Module @splat @moreSplat
      }
    displayName: Install modules from '${{ parameters.repoName }}'
